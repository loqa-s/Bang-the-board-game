import { deck, usedCards } from "./deck.js";
import { makePlayers } from "./players.js";

const btnTurn = document.querySelector(`.btn--turn`);
const btnUseCard = document.querySelector(`.btn--useCard`);

const gamePlayers = makePlayers();

const getCardStart = () => {
  // –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ä–∞–∑–¥–∞–µ—Ç—Å—è —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç, —Å–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –∂–∏–∑–Ω–µ–π
  for (let i = 0; i < gamePlayers.length; i++) {
    for (let j = 0; j < gamePlayers[i].lives; j++) {
      let shiftedCards = deck.shift();
      gamePlayers[i].cardsInHand.push(shiftedCards);
    }
  }
};

const getCardTurn = (player) => {
  // –ö–∞–∂–¥—ã–π —Ö–æ–¥ –±–µ—Ä–µ–º –¥–≤–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
  for (let i = 0; i < 2; i++) {
    let shiftedCards = deck.shift();
    player.cardsInHand.push(shiftedCards);
  }
  return player;
};

const findCardInHand = function (cardWeAreLooking) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ä—É–∫–µ –Ω—É–∂–Ω–∞—è –∫–∞—Ä—Ç–∞
  let tempCards = gamePlayers[gameState.whoseTurn - 1].cardsInHand;
  let checkIfCardsInHand = tempCards.some(
    (card) => card.Modificanto === String(cardWeAreLooking)
  );
  return checkIfCardsInHand;
};

const doctorsOffice = function (playerNumber) {
  // —Ñ—É–Ω–∫—Ü–∏—è —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–¥–æ—Ä–æ–≤—å—è –∏–≥—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–∏–¥–∞—é—Ç –ë–≠–ù–ì
  let tempPlayer = gamePlayers[playerNumber];
  if (!tempPlayer.isKilled) {
    if (tempPlayer.lives === 1) {
      tempPlayer.lives--;
      tempPlayer.isKilled = true;
      console.log(`‚ö∞ –í—ã —É–±–∏–ª–∏ ${tempPlayer.character} ‚ö∞`);
    } else {
      tempPlayer.lives--;
      console.log(`–ñ–∏–∑–Ω–µ–π —É ${tempPlayer.character} =`, tempPlayer.lives);
    }
  } else {
    alert(`${tempPlayer.character} —É–∂–µ —É–±–∏—Ç. ‚ö∞`);
  }
};

const usedCardIntoUsedCardsDeck = function (cardModificanto) {
  // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∏–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ä—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –∏—Ö –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞, –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  const tempPlayer = gamePlayers[gameState.whoseTurn - 1];
  const tempPlayerCardsInHand = tempPlayer.cardsInHand;
  const checkIndexOfaCard = tempPlayerCardsInHand.findIndex(
    (card) => card.Modificanto === String(cardModificanto)
  );
  usedCards.push(tempPlayerCardsInHand.splice(checkIndexOfaCard, 1));

  /*TODO: —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–±—Ä–∞—Ç—å –±–∞–≥—É —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é –æ–±—ä–µ–∫—Ç–æ–≤ —É usedCards, –Ω–æ –µ–µ –Ω—É–∂–Ω–æ –¥–æ–¥–µ–ª–∞—Ç—å
   –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ, –Ω–æ –ø–æ–∫–∞ –æ–Ω–∞ –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å –∑–¥–µ—Å—å!

  function transformUsedCards() {
    return usedCards.map(function (cards) {
      return cards.reduce(function (a, c) {
        a[c[0]] = c[1];
        return a;
      }, {});
    });
  }
  */

  return checkIndexOfaCard;
};

const turnChanger = () => {
  //–º–µ–Ω—è–µ–º —Ö–æ–¥—ã –≤ gameState, –æ–ø—Ä–µ–¥–µ–ª—è—è —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥.
  gameState.whoseTurn === gameState.numberPlayers
    ? (gameState.whoseTurn = 1)
    : gameState.whoseTurn++;
};

const turnState = function () {
  // –§—É–Ω–∫—Ü–∏—è —Å–º–æ—Ç—Ä–∏—Ç —á–µ–π —Ö–æ–¥ –∏ —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å
  let turnPlayer = gamePlayers[gameState.whoseTurn - 1];
  if (turnPlayer.lives === 0) {
    console.log(
      `${turnPlayer.character} —É–±–∏—Ç. –î–∞–ª—å–Ω–µ–π—à–∞—è –∏–≥—Ä–∞ –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.`
    );
  } else {
    getCardTurn(turnPlayer);
    console.log(
      `
      –°–µ–π—á–∞—Å —Ö–æ–¥ ${turnPlayer.character}, ${gameState.whoseTurn} –≤ —Å–ø–∏—Å–∫–µ. –û–Ω(–∞) –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã.
      –ò–≥—Ä–æ–∫: 
      ü§†: ${turnPlayer.character}
      ü©∏: ${turnPlayer.lives} –∂–∏–∑–Ω–∏
      üÉè: –í —Ä—É–∫–µ ${turnPlayer.cardsInHand.length} –∫–∞—Ä—Ç.`,
      turnPlayer.cardsInHand,
      `
      `
    );

    gameState.turnCounter++;

    console.log(`LOG: –í –∫–æ–ª–æ–¥–µ ${deck.length} –∫–∞—Ä—Ç`);
  }
};

const useCards = function (cardModificanto) {
  // –§—É–Ω–∫—Ü–∏—è —ç–º—É–ª–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç (–ø–æ–∫–∞ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –±—ç–Ω–≥)
  if (gameState.turnCounter <= 1) {
    alert(`–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!`);
    return;
  }
  if (findCardInHand(cardModificanto)) {
    const targetedPlayerNumber = Number(
      prompt(
        `–í –∫–æ–≥–æ c—Ç—Ä–µ–ª—è–µ–º, –∫–æ–≤–±–æ–π? 0? 1? 2? –¢—ã, –∫—Å—Ç–∞—Ç–∏, ${
          gameState.whoseTurn - 1
        }`
      )
    );

    if (targetedPlayerNumber !== gameState.whoseTurn - 1) {
      doctorsOffice(targetedPlayerNumber);
      usedCardIntoUsedCardsDeck(cardModificanto);
    } else if (targetedPlayerNumber === gameState.whoseTurn - 1) {
      alert(`–í —Å–µ–±—è —Å—Ç—Ä–µ–ª—è—Ç—å –Ω–µ –Ω–∞–¥–æ, –ø–æ–¥—É–º–∞–π –æ –±–ª–∏–∑–∫–∏—Ö`);
      return;
    } else {
      return;
    }
  } else {
    alert(`–£ —Ç–µ–±—è –Ω–µ—Ç –±—ç–Ω–≥–∞, –ø—Ä–∏—è—Ç–µ–ª—å`);
  }
};

let gameState = {
  // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  numberPlayers: gamePlayers.length,
  whoseTurn: 0,
  turnCounter: 0,
  gameOver: false,
};

console.log(gameState);

const gameTurn = function () {
  // –°–∏—Å—Ç–µ–º–∞ —Ö–æ–¥–æ–≤
  if (gameState.whoseTurn === 1) {
    turnState();
    return;
  }

  if (gameState.whoseTurn === 2) {
    turnState();
    return;
  }

  if (gameState.whoseTurn === gamePlayers.length) {
    turnState();
    return;
  }
};

console.log(gamePlayers);

btnTurn.addEventListener(`click`, function () {
  if (gameState.turnCounter === 0) {
    getCardStart();
    console.log(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!`);
    gameState.turnCounter++;
    return;
  }
  turnChanger();
  gameTurn();
  console.log(`LOG: –•–æ–¥ –ø–æ gameTurn: `, gameState.turnCounter);
});

btnUseCard.addEventListener(`click`, function () {
  useCards("Bang!");
  console.log(`LOG: –•–æ–¥ –ø–æ useCards: `, gameState.turnCounter);
});
