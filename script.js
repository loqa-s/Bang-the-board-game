import { deck, usedCards } from "./deck.js";
import { makePlayers } from "./players.js";
import { useCards } from "./cards.js";

const btnTurn = document.querySelector(`.btn--turn`);
const btnUseCard = document.querySelector(`.btn--useCard`);
const btnUseCardBeer = document.querySelector(`.btn--useCard-Beer`);

const gamePlayers = makePlayers();

const getCardStart = () => {
  // –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ä–∞–∑–¥–∞–µ—Ç—Å—è —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç, —Å–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –∂–∏–∑–Ω–µ–π
  for (let i = 0; i < gamePlayers.length; i++) {
    for (let j = 0; j < gamePlayers[i].lives; j++) {
      let shiftedCards = deck.shift();
      gamePlayers[i].cardsInHand.push(shiftedCards);
    }
  }
};

const getCardTurn = (player) => {
  // –ö–∞–∂–¥—ã–π —Ö–æ–¥ –±–µ—Ä–µ–º –¥–≤–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
  for (let i = 0; i < 2; i++) {
    let shiftedCards = deck.shift();
    player.cardsInHand.push(shiftedCards);
  }
  return player;
};

const turnChanger = () => {
  //–º–µ–Ω—è–µ–º —Ö–æ–¥—ã –≤ gameState, –æ–ø—Ä–µ–¥–µ–ª—è—è —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥.
  gameState.whoseTurn === gameState.numberPlayers
    ? (gameState.whoseTurn = 1)
    : gameState.whoseTurn++;
};

const turnState = function () {
  // –§—É–Ω–∫—Ü–∏—è —Å–º–æ—Ç—Ä–∏—Ç —á–µ–π —Ö–æ–¥ –∏ —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å
  let turnPlayer = gamePlayers[gameState.whoseTurn - 1];
  if (turnPlayer.lives === 0) {
    console.log(
      `${turnPlayer.character} —É–±–∏—Ç. –î–∞–ª—å–Ω–µ–π—à–∞—è –∏–≥—Ä–∞ –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.`
    );
  } else {
    getCardTurn(turnPlayer);
    console.log(
      `
      –°–µ–π—á–∞—Å —Ö–æ–¥ ${turnPlayer.character}, ${gameState.whoseTurn} –≤ —Å–ø–∏—Å–∫–µ. –û–Ω(–∞) –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã.
      –ò–≥—Ä–æ–∫: 
      ü§†: ${turnPlayer.character}
      ü©∏: ${turnPlayer.lives} –∂–∏–∑–Ω–∏
      üÉè: –í —Ä—É–∫–µ ${turnPlayer.cardsInHand.length} –∫–∞—Ä—Ç.`,
      turnPlayer.cardsInHand,
      `
      `
    );

    gameState.turnCounter++;

    console.log(`LOG: –í –∫–æ–ª–æ–¥–µ ${deck.length} –∫–∞—Ä—Ç`);
  }
};

let gameState = {
  // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  numberPlayers: gamePlayers.length,
  whoseTurn: 0,
  turnCounter: 0,
  gameOver: false,
};

console.log(gameState);

const gameTurn = function () {
  // –°–∏—Å—Ç–µ–º–∞ —Ö–æ–¥–æ–≤
  if (gameState.whoseTurn === 1) {
    turnState();
    return;
  }

  if (gameState.whoseTurn === 2) {
    turnState();
    return;
  }

  if (gameState.whoseTurn === gamePlayers.length) {
    turnState();
    return;
  }
};

console.log(gamePlayers);

btnTurn.addEventListener(`click`, function () {
  if (gameState.turnCounter === 0) {
    getCardStart();
    console.log(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!`);
    gameState.turnCounter++;
    return;
  }
  turnChanger();
  gameTurn();
  console.log(`LOG: –•–æ–¥ –ø–æ gameTurn: `, gameState.turnCounter);
});

btnUseCard.addEventListener(`click`, function () {
  useCards("Bang!");
  console.log(`LOG: –•–æ–¥ –ø–æ useCards: `, gameState.turnCounter);
});

btnUseCardBeer.addEventListener(`click`, function () {
  useCards("Beer");
  console.log(`LOG: –•–æ–¥ –ø–æ useCards-Beer: `, gameState.turnCounter);
});

export { gameState };
